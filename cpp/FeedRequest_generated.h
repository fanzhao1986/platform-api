// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEEDREQUEST_COM_REACTIVEMARKETS_PAPI_H_
#define FLATBUFFERS_GENERATED_FEEDREQUEST_COM_REACTIVEMARKETS_PAPI_H_

#include "flatbuffers/flatbuffers.h"

#include "Enum_generated.h"

namespace com {
namespace reactivemarkets {
namespace papi {

struct FeedRequest;
struct FeedRequestBuilder;

struct FeedRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FeedRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQ_ID = 4,
    VT_SUB_REQ_TYPE = 6,
    VT_FEED_TYPE = 8,
    VT_GROUPING = 10,
    VT_DEPTH = 12,
    VT_FREQUENCY = 14,
    VT_MARKETS = 16
  };
  const flatbuffers::String *req_id() const {
    return GetPointer<const flatbuffers::String *>(VT_REQ_ID);
  }
  com::reactivemarkets::papi::SubReqType sub_req_type() const {
    return static_cast<com::reactivemarkets::papi::SubReqType>(GetField<int16_t>(VT_SUB_REQ_TYPE, 1));
  }
  com::reactivemarkets::papi::FeedType feed_type() const {
    return static_cast<com::reactivemarkets::papi::FeedType>(GetField<int16_t>(VT_FEED_TYPE, 0));
  }
  uint16_t grouping() const {
    return GetField<uint16_t>(VT_GROUPING, 0);
  }
  int16_t depth() const {
    return GetField<int16_t>(VT_DEPTH, 0);
  }
  int16_t frequency() const {
    return GetField<int16_t>(VT_FREQUENCY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *markets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MARKETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REQ_ID) &&
           verifier.VerifyString(req_id()) &&
           VerifyField<int16_t>(verifier, VT_SUB_REQ_TYPE) &&
           VerifyField<int16_t>(verifier, VT_FEED_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_GROUPING) &&
           VerifyField<int16_t>(verifier, VT_DEPTH) &&
           VerifyField<int16_t>(verifier, VT_FREQUENCY) &&
           VerifyOffset(verifier, VT_MARKETS) &&
           verifier.VerifyVector(markets()) &&
           verifier.VerifyVectorOfStrings(markets()) &&
           verifier.EndTable();
  }
};

struct FeedRequestBuilder {
  typedef FeedRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_req_id(flatbuffers::Offset<flatbuffers::String> req_id) {
    fbb_.AddOffset(FeedRequest::VT_REQ_ID, req_id);
  }
  void add_sub_req_type(com::reactivemarkets::papi::SubReqType sub_req_type) {
    fbb_.AddElement<int16_t>(FeedRequest::VT_SUB_REQ_TYPE, static_cast<int16_t>(sub_req_type), 1);
  }
  void add_feed_type(com::reactivemarkets::papi::FeedType feed_type) {
    fbb_.AddElement<int16_t>(FeedRequest::VT_FEED_TYPE, static_cast<int16_t>(feed_type), 0);
  }
  void add_grouping(uint16_t grouping) {
    fbb_.AddElement<uint16_t>(FeedRequest::VT_GROUPING, grouping, 0);
  }
  void add_depth(int16_t depth) {
    fbb_.AddElement<int16_t>(FeedRequest::VT_DEPTH, depth, 0);
  }
  void add_frequency(int16_t frequency) {
    fbb_.AddElement<int16_t>(FeedRequest::VT_FREQUENCY, frequency, 0);
  }
  void add_markets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> markets) {
    fbb_.AddOffset(FeedRequest::VT_MARKETS, markets);
  }
  explicit FeedRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FeedRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FeedRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FeedRequest> CreateFeedRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> req_id = 0,
    com::reactivemarkets::papi::SubReqType sub_req_type = com::reactivemarkets::papi::SubReqType_Subscribe,
    com::reactivemarkets::papi::FeedType feed_type = com::reactivemarkets::papi::FeedType_Default,
    uint16_t grouping = 0,
    int16_t depth = 0,
    int16_t frequency = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> markets = 0) {
  FeedRequestBuilder builder_(_fbb);
  builder_.add_markets(markets);
  builder_.add_req_id(req_id);
  builder_.add_frequency(frequency);
  builder_.add_depth(depth);
  builder_.add_grouping(grouping);
  builder_.add_feed_type(feed_type);
  builder_.add_sub_req_type(sub_req_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<FeedRequest> CreateFeedRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *req_id = nullptr,
    com::reactivemarkets::papi::SubReqType sub_req_type = com::reactivemarkets::papi::SubReqType_Subscribe,
    com::reactivemarkets::papi::FeedType feed_type = com::reactivemarkets::papi::FeedType_Default,
    uint16_t grouping = 0,
    int16_t depth = 0,
    int16_t frequency = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *markets = nullptr) {
  auto req_id__ = req_id ? _fbb.CreateString(req_id) : 0;
  auto markets__ = markets ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*markets) : 0;
  return com::reactivemarkets::papi::CreateFeedRequest(
      _fbb,
      req_id__,
      sub_req_type,
      feed_type,
      grouping,
      depth,
      frequency,
      markets__);
}

}  // namespace papi
}  // namespace reactivemarkets
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_FEEDREQUEST_COM_REACTIVEMARKETS_PAPI_H_
